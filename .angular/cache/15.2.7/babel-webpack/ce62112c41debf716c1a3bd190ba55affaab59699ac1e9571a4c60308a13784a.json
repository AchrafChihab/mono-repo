{"ast":null,"code":"import { StorageService } from './../services/storage.service';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../services/storage.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(StorageService, router) {\n    this.StorageService = StorageService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const token = this.StorageService.getToken();\n    if (!token) {\n      this.router.navigate(['/login']);\n      return false;\n    }\n    const decodeToken = atob(token);\n    if (token.split('.').length == 3) {\n      const payload = token.split('.')[1];\n    }\n    return true;\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.StorageService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["StorageService","ActivatedRouteSnapshot","Router","RouterStateSnapshot","UrlTree","AuthGuard","constructor","router","canActivate","route","state","token","getToken","navigate","decodeToken","atob","split","length","payload","i0","ɵɵinject","i1","i2","factory","ɵfac","providedIn"],"sources":["C:\\laragon\\www\\Angular-15-with-monorepo--master\\libs\\users\\src\\lib\\guard\\auth.guard.ts"],"sourcesContent":["import { StorageService } from './../services/storage.service';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor (private StorageService:StorageService, private router:Router){}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n\n        const token: string | null = this.StorageService.getToken()\n\n        if(!token){\n          this.router.navigate(['/login'])\n          return false\n        }\n\n\n        const decodeToken = atob(token)\n\n        if (token.split('.').length == 3) {\n          const payload= token.split('.')[1]\n\n        }\n    return true;\n  }\n\n}\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,+BAA+B;AAE9D,SAASC,sBAAsB,EAAeC,MAAM,EAAEC,mBAAmB,EAAEC,OAAO,QAAQ,iBAAiB;;;;AAM3G,OAAM,MAAOC,SAAS;EAEpBC,YAAqBN,cAA6B,EAAUO,MAAa;IAApD,KAAAP,cAAc,GAAdA,cAAc;IAAyB,KAAAO,MAAM,GAANA,MAAM;EAAS;EAE3EC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAEtB,MAAMC,KAAK,GAAkB,IAAI,CAACX,cAAc,CAACY,QAAQ,EAAE;IAE3D,IAAG,CAACD,KAAK,EAAC;MACR,IAAI,CAACJ,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;IAId,MAAMC,WAAW,GAAGC,IAAI,CAACJ,KAAK,CAAC;IAE/B,IAAIA,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,IAAI,CAAC,EAAE;MAChC,MAAMC,OAAO,GAAEP,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;IAGxC,OAAO,IAAI;EACb;;AAvBWX,SAAS,C;mBAATA,SAAS,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAArB,cAAA,GAAAmB,EAAA,CAAAC,QAAA,CAAAE,EAAA,CAAApB,MAAA;AAAA;AAATG,SAAS,C;SAATA,SAAS;EAAAkB,OAAA,EAATlB,SAAS,CAAAmB,IAAA;EAAAC,UAAA,EAFR;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}